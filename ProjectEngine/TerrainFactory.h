#pragma once

#include <iostream>

#include "Terrain.h"

/** @class: TerrainFactory.

	@author: Joshua Voysey.
	@date: 3rd June 2015.
	@version: 1.1.

	Description:    The terrain factory uses heightmaps (.raw format) to generate VBOs and color buffers.
					It is also intended to create UV buffers and textures, but this is currently non-functional.
*/
class TerrainFactory{

public:
	TerrainFactory(void) {};                        // Constructor.
	~TerrainFactory(void) { ResetContainers(); };    // Destructor.

	/** @brief: Set factory to create textured terrain.

		@param: fileName (std::string) - Filepath used to reference a heightmap (.raw format).
		@param: size (GLuint) - Dimensions of the height map file.

		Description: This function initiliases the TerrainFactory to create terrain WITHOUT textures.

		@pre: fileName should point to a valid .raw file, and size should be the same as the dimensions of the file.

		@post: TerrainFactory is now fully functional.
	*/
	void Init(std::string fileName, GLuint size, std::string texFile = "");

	/** @brief: Set the TerrainFactory's scaling.

		@param: sX (GLfloat) - Scale of geometry along the X-axis.
		@param: sY (GLfloat) - Scale of geometry along the Y-axis.
		@param: sZ (GLfloat) - Scale of geometry along the Z-axis.

		Description: Set the scaling for the geometry generated by the TerrainFactory object.

		@pre: NONE.

		@post: The TerrainFactory's scaling for all geometry has now been altered.
	*/
	void SetScaleFactor(GLfloat sX, GLfloat sY, GLfloat sZ);

	/** @brief: Build a textured terrain object using the TerrainFactory's loaded data.

		@param: _pos (glm::vec3) - co-ordinates to draw the new terrain object.

		Description: Build the terrain's VBO. Construct any required UV or color data. Output the new object.

		@return: Address to a new Terrain object at the _pos co-ordinates.

		@pre: Enough memory to create a new Terrain object with the data generated by the TerrainFactory.

		@post: A new Terrain object has been created.
	*/
	Terrain* BuildAt(glm::vec3 _pos);

	/** @brief: Fault algorithm for generating a heightMap.

		@param: outPutFile (std::string) - FilePath for the outputted .raw file.
		@param: dimensions (unsigned int) - Dimensions of the outputFile hieghtmap.
		@param: minHeight (float) - Minimum value that a pixel will be altered by.
		@param: maxHeight (float) - Maximum value that a pixel can be altered by.
		@param: iterations (unsigned int) - Number of faultlines that will be applied to the file.
		@param: weight (float) - Magnitude of effect applied by the fault lines.
		@param: random (boolean) - Toggle whether the algorithm is truly random, or just pseudo-random.

		Description: Generate a height map dynamically using the fault algorithm.

		@return: NO in-code return values, but a .raw file is created.

		@pre: There must be room in memory to store a .raw file of the dimensions specified.

		@post: A .raw file has been generated based on the parameters entered into the function.
	*/
	void generateRAW_faultLine(std::string outputFile, unsigned int dimensions, float minHeight, float maxHeight, unsigned int iterations, float weight, bool random);

private:

	/** @brief: Get the current terrain's height at the specified point.

		Description: Get the height of the terrain that is currently being generated by the TerrainFactory, at the specifed co-ordinates.

		@return: The height value of the terrain at the specified point.

		@pre: Co-ordinates must point to a valid index.

		@post: NONE.
	*/
	GLfloat GetHeight(int x, int z);

	/** @brief: Reset the data in the TerrainFactory object.

		Description: Clear each pointer that contains data. Reset them to nullptrs.

		@pre: NONE.

		@post: All data containers are now empty and reset to null pointers.
	*/
	void ResetContainers();

	/** @brief: Apply FIR algorithm in all directions.

		Description: Apply the FIR erosion algorithm to a valid height map in all four directions.

		@pre: data must point to a valid float array. 'size' must match the dimensions of the height map.

		@post: height map erosion has been completed.
	*/
	void Apply_FIR_Filter(float* data, float weight, int size);

	/** @brief: Apply a single erosion pass to a height map.

		Description: Apply the FIR erosion algorithm to a height map in a single direction.

		@pre: data must point to a vaild float array. 'size' must match the dimensions of the height map.

		@post: data ahs been eroded in a single direction.
	*/
	void Apply_FIR_Pass(float* data, int increment, float weight, int size);

	/** @brief: Normalise a height map's values.

		Description: Normalise the height values of a heightmap.

		@pre: data must point to a valid float array. 'size' must match the dimensions of teh height map.

		@post: Heightmap has now been normalised.
	*/
	void Apply_Normalise(float* data, int size);


	GLuint buildSize;                   // Dimensions of the heightMap.
	GLuint dataBufferSize;              // Size of the required VBO buffer.
	glm::vec3 buildPosition;            // Co-ordinates of the factory's current build origin.
	glm::vec3 buildScale;               // Scale of the terrains / heightmaps generated by the factory.

	char* heightMapData;                // Container for heightmap data.
	float* heightMap;                    // Data container passed on to Terrain object.
	float* vertData;                    // container for a VBO. Data is passed on to Terrain objects.
	float* colorData;                   // Container for color information. Data is passed on to Terrain objects.
	float* uvMapData;                   // Container for UV information. Data is passed on to Terrain objects.

	bool isTextured;                    // Flag to check if the terrain is textured or not.
	std::string textureFilePath;        // Filepath that is passed on to the Terrain (if it is textured).
	GLint textureFileSize;              // Dimensions of the texture file.
};

