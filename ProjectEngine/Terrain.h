#pragma once

// Standard libraries.
#include <fstream>
#include <iostream>
#include <iomanip>
#include <random>

// 3D graphics libraries.
#include "GLM.h"
#include "OpenGL.h"

// Local headers.
#include "FileReader.h"

/** @class: Terrain.

    Description:    
*/
class Terrain{

    public:
        Terrain(int _dimensions){dimensions = _dimensions;  };            // Constructor.
        ~Terrain(){Destroy();}; // Destructor.

        // Various initialisations, depending on if the terrain is meant to be textured or not.
		void Init(GLfloat verts[], GLint vertBuffSize, GLfloat colors[], GLint colorBufferSize, GLfloat UVdata[], GLint uvBufferSize, const std::string &fileName);

        void Render();          // Render the terrain onscreen.

        void Destroy();         // Release data held in the terrain.

    private:

		enum : unsigned short{ VERTEX = 0, COLOR = 1, UV = 2 };

		GLuint vertexBufferID;              // VBO handle.
		GLuint colorBufferID;
		GLuint uvBufferID;
		GLuint vertexArrayID;               // VAO handle.

		//Texture texture;                    // Texture object.

		std::vector<float> modelData;       // Container for vertex position data.
		std::vector<float> colorData;
		std::vector<float> uvData;

		GLint vBufferLength;                // Length of the 'modelData' variable when it is filled.

		bool isTextured;                    // Flag for if the model is textured or not.

        //Model model;            // Terrain's model object.
        int dimensions;
};

/** @class: TerrainFactory.

    Description:    The terrain factory uses heightmaps (.raw format) to generate VBOs and color buffers.
                    It is also intended to create UV buffers and textures, but this is currently non-functional.
*/
class TerrainFactory{

    public:
        TerrainFactory(void) {};                        // Constructor.
        ~TerrainFactory(void) { ResetContainers();};    // Destructor.

        // Various initilisations, depending on if the factory is loading textures or not. Previous data is overridden eachtime Init() is called.
		void Init(std::string fileName, GLuint size, std::string texFile);

        // Set the scale of the various axis that the factory will generate in.
        void SetScaleFactor(GLfloat sX, GLfloat sY, GLfloat sZ);

        // Build a terrain object at _pos co-ordinates.
        Terrain* BuildAt(glm::vec3 _pos);

        // Generate various heightmap .raw files programmatically during run-time.
        void generateRAW_faultLine(std::string outputFile, unsigned int dimensions, float minHeight, float maxHeight, unsigned int iterations, float weight, bool random);     // Fault algorithm.

    private:

        GLfloat GetHeight(int x, int z);    // Get the y-co-ordinate of the model at a certain set of x and z co-ordinates.

        void ResetContainers();             // Clear the various buffers in the factory.

        void Apply_FIR_Filter(float* data, float weight, int size);                     // Simulate erosion of fault-algorithm heightmaps.
        void Apply_FIR_Pass(float* data, int increment, float weight, int size);        // Simulate FIR erosion on a single pass.
        void Apply_Normalise(float* data, int size);                                    // Normalise the values of the fault-algorithm heightmaps.


        GLuint buildSize;                   // Dimensions of the heightMap.
        GLuint dataBufferSize;              // Size of the required VBO buffer.
        glm::vec3 buildPosition;            // Co-ordinates of the factory's current build origin.
        glm::vec3 buildScale;               // Scale of the terrains / heightmaps generated by the factory.

        char* heightMapData;                // Container for heightmap data.
        float* heightMap;                    // Data container passed on to Terrain object.
        float* vertData;                    // container for a VBO. Data is passed on to Terrain objects.
        float* colorData;                   // Container for color information. Data is passed on to Terrain objects.
        float* uvMapData;                   // Container for UV information. Data is passed on to Terrain objects.

        bool isTextured;                    // Flag to check if the terrain is textured or not.
        std::string textureFilePath;        // Filepath that is passed on to the Terrain (if it is textured).
        GLint textureFileSize;              // Dimensions of the texture file.
};

